/**
 * Corteza system API
 * Corteza system REST API definition
 *
 * The version of the OpenAPI document: 2022.9
 * Contact: info@cortezaproject.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { SystemApplicationApplicationIDPutRequest } from '../model/systemApplicationApplicationIDPutRequest';
import { SystemApplicationPostRequest } from '../model/systemApplicationPostRequest';
import { SystemApplicationReorderPostRequest } from '../model/systemApplicationReorderPostRequest';
import { SystemApplicationUploadPostRequest } from '../model/systemApplicationUploadPostRequest';
import { SystemRolesRoleIDTriggerPostRequest } from '../model/systemRolesRoleIDTriggerPostRequest';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class ApplicationsService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Remove application
     * 
     * @param applicationID Application ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public systemApplicationApplicationIDDelete(applicationID: string, ): Observable<AxiosResponse<any>>;
    public systemApplicationApplicationIDDelete(applicationID: string, ): Observable<any> {
        if (applicationID === null || applicationID === undefined) {
            throw new Error('Required parameter applicationID was null or undefined when calling systemApplicationApplicationIDDelete.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/system/application/${encodeURIComponent(String(applicationID))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Unflag application
     * 
     * @param applicationID Application ID
     * @param flag Flag
     * @param ownedBy Owner; 0 &#x3D; everyone
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public systemApplicationApplicationIDFlagOwnedByFlagDelete(applicationID: string, flag: string, ownedBy: string, ): Observable<AxiosResponse<any>>;
    public systemApplicationApplicationIDFlagOwnedByFlagDelete(applicationID: string, flag: string, ownedBy: string, ): Observable<any> {
        if (applicationID === null || applicationID === undefined) {
            throw new Error('Required parameter applicationID was null or undefined when calling systemApplicationApplicationIDFlagOwnedByFlagDelete.');
        }

        if (flag === null || flag === undefined) {
            throw new Error('Required parameter flag was null or undefined when calling systemApplicationApplicationIDFlagOwnedByFlagDelete.');
        }

        if (ownedBy === null || ownedBy === undefined) {
            throw new Error('Required parameter ownedBy was null or undefined when calling systemApplicationApplicationIDFlagOwnedByFlagDelete.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/system/application/${encodeURIComponent(String(applicationID))}/flag/${encodeURIComponent(String(ownedBy))}/${encodeURIComponent(String(flag))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Flag application
     * 
     * @param applicationID Application ID
     * @param flag Flag
     * @param ownedBy Owner; 0 &#x3D; everyone
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public systemApplicationApplicationIDFlagOwnedByFlagPost(applicationID: string, flag: string, ownedBy: string, ): Observable<AxiosResponse<any>>;
    public systemApplicationApplicationIDFlagOwnedByFlagPost(applicationID: string, flag: string, ownedBy: string, ): Observable<any> {
        if (applicationID === null || applicationID === undefined) {
            throw new Error('Required parameter applicationID was null or undefined when calling systemApplicationApplicationIDFlagOwnedByFlagPost.');
        }

        if (flag === null || flag === undefined) {
            throw new Error('Required parameter flag was null or undefined when calling systemApplicationApplicationIDFlagOwnedByFlagPost.');
        }

        if (ownedBy === null || ownedBy === undefined) {
            throw new Error('Required parameter ownedBy was null or undefined when calling systemApplicationApplicationIDFlagOwnedByFlagPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/system/application/${encodeURIComponent(String(applicationID))}/flag/${encodeURIComponent(String(ownedBy))}/${encodeURIComponent(String(flag))}`,
                    null,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Read application details
     * 
     * @param applicationID Application ID
     * @param incFlags Calculated (0, default), global (1) or return only (2) own flags
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public systemApplicationApplicationIDGet(applicationID: string, incFlags?: string, ): Observable<AxiosResponse<any>>;
    public systemApplicationApplicationIDGet(applicationID: string, incFlags?: string, ): Observable<any> {
        if (applicationID === null || applicationID === undefined) {
            throw new Error('Required parameter applicationID was null or undefined when calling systemApplicationApplicationIDGet.');
        }

        let queryParameters = new URLSearchParams();
        if (incFlags !== undefined && incFlags !== null) {
            queryParameters.append('incFlags', <any>incFlags);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/system/application/${encodeURIComponent(String(applicationID))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Update user details
     * 
     * @param applicationID Application ID
     * @param systemApplicationApplicationIDPutRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public systemApplicationApplicationIDPut(applicationID: string, systemApplicationApplicationIDPutRequest?: SystemApplicationApplicationIDPutRequest, ): Observable<AxiosResponse<any>>;
    public systemApplicationApplicationIDPut(applicationID: string, systemApplicationApplicationIDPutRequest?: SystemApplicationApplicationIDPutRequest, ): Observable<any> {
        if (applicationID === null || applicationID === undefined) {
            throw new Error('Required parameter applicationID was null or undefined when calling systemApplicationApplicationIDPut.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/system/application/${encodeURIComponent(String(applicationID))}`,
                    systemApplicationApplicationIDPutRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Fire system:application trigger
     * 
     * @param applicationID ID
     * @param systemRolesRoleIDTriggerPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public systemApplicationApplicationIDTriggerPost(applicationID: string, systemRolesRoleIDTriggerPostRequest?: SystemRolesRoleIDTriggerPostRequest, ): Observable<AxiosResponse<any>>;
    public systemApplicationApplicationIDTriggerPost(applicationID: string, systemRolesRoleIDTriggerPostRequest?: SystemRolesRoleIDTriggerPostRequest, ): Observable<any> {
        if (applicationID === null || applicationID === undefined) {
            throw new Error('Required parameter applicationID was null or undefined when calling systemApplicationApplicationIDTriggerPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/system/application/${encodeURIComponent(String(applicationID))}/trigger`,
                    systemRolesRoleIDTriggerPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Undelete application
     * 
     * @param applicationID Application ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public systemApplicationApplicationIDUndeletePost(applicationID: string, ): Observable<AxiosResponse<any>>;
    public systemApplicationApplicationIDUndeletePost(applicationID: string, ): Observable<any> {
        if (applicationID === null || applicationID === undefined) {
            throw new Error('Required parameter applicationID was null or undefined when calling systemApplicationApplicationIDUndeletePost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/system/application/${encodeURIComponent(String(applicationID))}/undelete`,
                    null,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * List applications
     * 
     * @param name Application name
     * @param query Filter applications
     * @param deleted Exclude (0, default), include (1) or return only (2) deleted roles
     * @param labels Labels
     * @param flags Flags
     * @param incFlags Calculated (0, default), global (1) or return only (2) own flags
     * @param limit Limit
     * @param incTotal Include total counter
     * @param pageCursor Page cursor
     * @param sort Sort items
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public systemApplicationGet(name?: string, query?: string, deleted?: string, labels?: string, flags?: Array<string>, incFlags?: string, limit?: string, incTotal?: boolean, pageCursor?: string, sort?: string, ): Observable<AxiosResponse<any>>;
    public systemApplicationGet(name?: string, query?: string, deleted?: string, labels?: string, flags?: Array<string>, incFlags?: string, limit?: string, incTotal?: boolean, pageCursor?: string, sort?: string, ): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (name !== undefined && name !== null) {
            queryParameters.append('name', <any>name);
        }
        if (query !== undefined && query !== null) {
            queryParameters.append('query', <any>query);
        }
        if (deleted !== undefined && deleted !== null) {
            queryParameters.append('deleted', <any>deleted);
        }
        if (labels !== undefined && labels !== null) {
            queryParameters.append('labels', <any>labels);
        }
        if (flags) {
            flags.forEach((element) => {
                queryParameters.append('flags', <any>element);
            })
        }
        if (incFlags !== undefined && incFlags !== null) {
            queryParameters.append('incFlags', <any>incFlags);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (incTotal !== undefined && incTotal !== null) {
            queryParameters.append('incTotal', <any>incTotal);
        }
        if (pageCursor !== undefined && pageCursor !== null) {
            queryParameters.append('pageCursor', <any>pageCursor);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters.append('sort', <any>sort);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/system/application/`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Create application
     * 
     * @param systemApplicationPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public systemApplicationPost(systemApplicationPostRequest?: SystemApplicationPostRequest, ): Observable<AxiosResponse<any>>;
    public systemApplicationPost(systemApplicationPostRequest?: SystemApplicationPostRequest, ): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/system/application/`,
                    systemApplicationPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Reorder applications
     * 
     * @param systemApplicationReorderPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public systemApplicationReorderPost(systemApplicationReorderPostRequest?: SystemApplicationReorderPostRequest, ): Observable<AxiosResponse<any>>;
    public systemApplicationReorderPost(systemApplicationReorderPostRequest?: SystemApplicationReorderPostRequest, ): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/system/application/reorder`,
                    systemApplicationReorderPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Upload application assets
     * 
     * @param systemApplicationUploadPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public systemApplicationUploadPost(systemApplicationUploadPostRequest?: SystemApplicationUploadPostRequest, ): Observable<AxiosResponse<any>>;
    public systemApplicationUploadPost(systemApplicationUploadPostRequest?: SystemApplicationUploadPostRequest, ): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/system/application/upload`,
                    systemApplicationUploadPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
