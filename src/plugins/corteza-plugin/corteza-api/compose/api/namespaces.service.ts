/**
 * Corteza compose API
 * Corteza compose REST API definition
 *
 * The version of the OpenAPI document: 2022.9
 * Contact: info@cortezaproject.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { ComposeNamespaceImportPostRequest } from '../model/composeNamespaceImportPostRequest';
import { ComposeNamespaceImportSessionIDPostRequest } from '../model/composeNamespaceImportSessionIDPostRequest';
import { ComposeNamespaceNamespaceIDClonePostRequest } from '../model/composeNamespaceNamespaceIDClonePostRequest';
import { ComposeNamespaceNamespaceIDPostRequest } from '../model/composeNamespaceNamespaceIDPostRequest';
import { ComposeNamespaceNamespaceIDTranslationPatchRequest } from '../model/composeNamespaceNamespaceIDTranslationPatchRequest';
import { ComposeNamespaceNamespaceIDTriggerPostRequest } from '../model/composeNamespaceNamespaceIDTriggerPostRequest';
import { ComposeNamespacePostRequest } from '../model/composeNamespacePostRequest';
import { ComposeNamespaceUploadPostRequest } from '../model/composeNamespaceUploadPostRequest';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class NamespacesService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * List namespaces
     * 
     * @param query Search query
     * @param slug Search by namespace slug
     * @param limit Limit
     * @param incTotal Include total counter
     * @param labels Labels
     * @param pageCursor Page cursor
     * @param sort Sort items
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceGet(query?: string, slug?: string, limit?: string, incTotal?: boolean, labels?: string, pageCursor?: string, sort?: string, ): Observable<AxiosResponse<any>>;
    public composeNamespaceGet(query?: string, slug?: string, limit?: string, incTotal?: boolean, labels?: string, pageCursor?: string, sort?: string, ): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (query !== undefined && query !== null) {
            queryParameters.append('query', <any>query);
        }
        if (slug !== undefined && slug !== null) {
            queryParameters.append('slug', <any>slug);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (incTotal !== undefined && incTotal !== null) {
            queryParameters.append('incTotal', <any>incTotal);
        }
        if (labels !== undefined && labels !== null) {
            queryParameters.append('labels', <any>labels);
        }
        if (pageCursor !== undefined && pageCursor !== null) {
            queryParameters.append('pageCursor', <any>pageCursor);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters.append('sort', <any>sort);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/compose/namespace/`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Initiate namespace import session
     * 
     * @param composeNamespaceImportPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceImportPost(composeNamespaceImportPostRequest?: ComposeNamespaceImportPostRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceImportPost(composeNamespaceImportPostRequest?: ComposeNamespaceImportPostRequest, ): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/namespace/import`,
                    composeNamespaceImportPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Run namespace import
     * 
     * @param sessionID Import session
     * @param composeNamespaceImportSessionIDPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceImportSessionIDPost(sessionID: string, composeNamespaceImportSessionIDPostRequest?: ComposeNamespaceImportSessionIDPostRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceImportSessionIDPost(sessionID: string, composeNamespaceImportSessionIDPostRequest?: ComposeNamespaceImportSessionIDPostRequest, ): Observable<any> {
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling composeNamespaceImportSessionIDPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/namespace/import/${encodeURIComponent(String(sessionID))}`,
                    composeNamespaceImportSessionIDPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Clone compose namespace
     * 
     * @param namespaceID ID
     * @param composeNamespaceNamespaceIDClonePostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDClonePost(namespaceID: string, composeNamespaceNamespaceIDClonePostRequest?: ComposeNamespaceNamespaceIDClonePostRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDClonePost(namespaceID: string, composeNamespaceNamespaceIDClonePostRequest?: ComposeNamespaceNamespaceIDClonePostRequest, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDClonePost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/clone`,
                    composeNamespaceNamespaceIDClonePostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Delete namespace
     * 
     * @param namespaceID ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDDelete(namespaceID: string, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDDelete(namespaceID: string, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDDelete.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Export compose namespace
     * 
     * @param namespaceID ID
     * @param filename Output file name
     * @param ext Output file ext
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDExportFilenameZipGet(namespaceID: string, filename: string, ext: string, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDExportFilenameZipGet(namespaceID: string, filename: string, ext: string, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDExportFilenameZipGet.');
        }

        if (filename === null || filename === undefined) {
            throw new Error('Required parameter filename was null or undefined when calling composeNamespaceNamespaceIDExportFilenameZipGet.');
        }

        if (ext === null || ext === undefined) {
            throw new Error('Required parameter ext was null or undefined when calling composeNamespaceNamespaceIDExportFilenameZipGet.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/export/${encodeURIComponent(String(filename))}.zip`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Read namespace
     * 
     * @param namespaceID ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDGet(namespaceID: string, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDGet(namespaceID: string, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDGet.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Update namespace
     * 
     * @param namespaceID ID
     * @param composeNamespaceNamespaceIDPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDPost(namespaceID: string, composeNamespaceNamespaceIDPostRequest?: ComposeNamespaceNamespaceIDPostRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDPost(namespaceID: string, composeNamespaceNamespaceIDPostRequest?: ComposeNamespaceNamespaceIDPostRequest, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}`,
                    composeNamespaceNamespaceIDPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * List translation
     * 
     * @param namespaceID ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDTranslationGet(namespaceID: string, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDTranslationGet(namespaceID: string, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDTranslationGet.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/translation`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Update translation
     * 
     * @param namespaceID ID
     * @param composeNamespaceNamespaceIDTranslationPatchRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDTranslationPatch(namespaceID: string, composeNamespaceNamespaceIDTranslationPatchRequest?: ComposeNamespaceNamespaceIDTranslationPatchRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDTranslationPatch(namespaceID: string, composeNamespaceNamespaceIDTranslationPatchRequest?: ComposeNamespaceNamespaceIDTranslationPatchRequest, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDTranslationPatch.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/translation`,
                    composeNamespaceNamespaceIDTranslationPatchRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Fire compose:namespace trigger
     * 
     * @param namespaceID ID
     * @param composeNamespaceNamespaceIDTriggerPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDTriggerPost(namespaceID: string, composeNamespaceNamespaceIDTriggerPostRequest?: ComposeNamespaceNamespaceIDTriggerPostRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDTriggerPost(namespaceID: string, composeNamespaceNamespaceIDTriggerPostRequest?: ComposeNamespaceNamespaceIDTriggerPostRequest, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDTriggerPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/trigger`,
                    composeNamespaceNamespaceIDTriggerPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Create namespace
     * 
     * @param composeNamespacePostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespacePost(composeNamespacePostRequest?: ComposeNamespacePostRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespacePost(composeNamespacePostRequest?: ComposeNamespacePostRequest, ): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/namespace/`,
                    composeNamespacePostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Upload namespace assets
     * 
     * @param composeNamespaceUploadPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceUploadPost(composeNamespaceUploadPostRequest?: ComposeNamespaceUploadPostRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceUploadPost(composeNamespaceUploadPostRequest?: ComposeNamespaceUploadPostRequest, ): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/namespace/upload`,
                    composeNamespaceUploadPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
