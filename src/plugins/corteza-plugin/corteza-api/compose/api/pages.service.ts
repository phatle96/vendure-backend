/**
 * Corteza compose API
 * Corteza compose REST API definition
 *
 * The version of the OpenAPI document: 2022.9
 * Contact: info@cortezaproject.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { ComposeNamespaceNamespaceIDPagePageIDPostRequest } from '../model/composeNamespaceNamespaceIDPagePageIDPostRequest';
import { ComposeNamespaceNamespaceIDPagePostRequest } from '../model/composeNamespaceNamespaceIDPagePostRequest';
import { ComposeNamespaceNamespaceIDPageSelfIDReorderPostRequest } from '../model/composeNamespaceNamespaceIDPageSelfIDReorderPostRequest';
import { ComposeNamespaceNamespaceIDTranslationPatchRequest } from '../model/composeNamespaceNamespaceIDTranslationPatchRequest';
import { ComposeNamespaceNamespaceIDTriggerPostRequest } from '../model/composeNamespaceNamespaceIDTriggerPostRequest';
import { ComposeNamespaceUploadPostRequest } from '../model/composeNamespaceUploadPostRequest';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class PagesService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * List available pages
     * 
     * @param namespaceID Namespace ID
     * @param selfID Parent page ID
     * @param moduleID Module ID
     * @param query Search query
     * @param handle Search by handle
     * @param labels Labels
     * @param limit Limit
     * @param pageCursor Page cursor
     * @param sort Sort items
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDPageGet(namespaceID: string, selfID?: string, moduleID?: string, query?: string, handle?: string, labels?: string, limit?: string, pageCursor?: string, sort?: string, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDPageGet(namespaceID: string, selfID?: string, moduleID?: string, query?: string, handle?: string, labels?: string, limit?: string, pageCursor?: string, sort?: string, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDPageGet.');
        }

        let queryParameters = new URLSearchParams();
        if (selfID !== undefined && selfID !== null) {
            queryParameters.append('selfID', <any>selfID);
        }
        if (moduleID !== undefined && moduleID !== null) {
            queryParameters.append('moduleID', <any>moduleID);
        }
        if (query !== undefined && query !== null) {
            queryParameters.append('query', <any>query);
        }
        if (handle !== undefined && handle !== null) {
            queryParameters.append('handle', <any>handle);
        }
        if (labels !== undefined && labels !== null) {
            queryParameters.append('labels', <any>labels);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (pageCursor !== undefined && pageCursor !== null) {
            queryParameters.append('pageCursor', <any>pageCursor);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters.append('sort', <any>sort);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/page/`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Uploads attachment to page
     * 
     * @param namespaceID Namespace ID
     * @param pageID Page ID
     * @param composeNamespaceUploadPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDPagePageIDAttachmentPost(namespaceID: string, pageID: string, composeNamespaceUploadPostRequest?: ComposeNamespaceUploadPostRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDPagePageIDAttachmentPost(namespaceID: string, pageID: string, composeNamespaceUploadPostRequest?: ComposeNamespaceUploadPostRequest, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDAttachmentPost.');
        }

        if (pageID === null || pageID === undefined) {
            throw new Error('Required parameter pageID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDAttachmentPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/page/${encodeURIComponent(String(pageID))}/attachment`,
                    composeNamespaceUploadPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Delete page
     * 
     * @param namespaceID Namespace ID
     * @param pageID Page ID
     * @param strategy Page delete strategy (abort, force, rebase, cascade)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDPagePageIDDelete(namespaceID: string, pageID: string, strategy?: string, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDPagePageIDDelete(namespaceID: string, pageID: string, strategy?: string, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDDelete.');
        }

        if (pageID === null || pageID === undefined) {
            throw new Error('Required parameter pageID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDDelete.');
        }

        let queryParameters = new URLSearchParams();
        if (strategy !== undefined && strategy !== null) {
            queryParameters.append('strategy', <any>strategy);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/page/${encodeURIComponent(String(pageID))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get page details
     * 
     * @param namespaceID Namespace ID
     * @param pageID Page ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDPagePageIDGet(namespaceID: string, pageID: string, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDPagePageIDGet(namespaceID: string, pageID: string, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDGet.');
        }

        if (pageID === null || pageID === undefined) {
            throw new Error('Required parameter pageID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDGet.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/page/${encodeURIComponent(String(pageID))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Update page
     * 
     * @param namespaceID Namespace ID
     * @param pageID Page ID
     * @param composeNamespaceNamespaceIDPagePageIDPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDPagePageIDPost(namespaceID: string, pageID: string, composeNamespaceNamespaceIDPagePageIDPostRequest?: ComposeNamespaceNamespaceIDPagePageIDPostRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDPagePageIDPost(namespaceID: string, pageID: string, composeNamespaceNamespaceIDPagePageIDPostRequest?: ComposeNamespaceNamespaceIDPagePageIDPostRequest, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDPost.');
        }

        if (pageID === null || pageID === undefined) {
            throw new Error('Required parameter pageID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/page/${encodeURIComponent(String(pageID))}`,
                    composeNamespaceNamespaceIDPagePageIDPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * List page translation
     * 
     * @param namespaceID Namespace ID
     * @param pageID ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDPagePageIDTranslationGet(namespaceID: string, pageID: string, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDPagePageIDTranslationGet(namespaceID: string, pageID: string, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDTranslationGet.');
        }

        if (pageID === null || pageID === undefined) {
            throw new Error('Required parameter pageID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDTranslationGet.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/page/${encodeURIComponent(String(pageID))}/translation`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Update page translation
     * 
     * @param namespaceID Namespace ID
     * @param pageID ID
     * @param composeNamespaceNamespaceIDTranslationPatchRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDPagePageIDTranslationPatch(namespaceID: string, pageID: string, composeNamespaceNamespaceIDTranslationPatchRequest?: ComposeNamespaceNamespaceIDTranslationPatchRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDPagePageIDTranslationPatch(namespaceID: string, pageID: string, composeNamespaceNamespaceIDTranslationPatchRequest?: ComposeNamespaceNamespaceIDTranslationPatchRequest, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDTranslationPatch.');
        }

        if (pageID === null || pageID === undefined) {
            throw new Error('Required parameter pageID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDTranslationPatch.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/page/${encodeURIComponent(String(pageID))}/translation`,
                    composeNamespaceNamespaceIDTranslationPatchRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Fire compose:page trigger
     * 
     * @param namespaceID Namespace ID
     * @param pageID Page ID
     * @param composeNamespaceNamespaceIDTriggerPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDPagePageIDTriggerPost(namespaceID: string, pageID: string, composeNamespaceNamespaceIDTriggerPostRequest?: ComposeNamespaceNamespaceIDTriggerPostRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDPagePageIDTriggerPost(namespaceID: string, pageID: string, composeNamespaceNamespaceIDTriggerPostRequest?: ComposeNamespaceNamespaceIDTriggerPostRequest, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDTriggerPost.');
        }

        if (pageID === null || pageID === undefined) {
            throw new Error('Required parameter pageID was null or undefined when calling composeNamespaceNamespaceIDPagePageIDTriggerPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/page/${encodeURIComponent(String(pageID))}/trigger`,
                    composeNamespaceNamespaceIDTriggerPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Create page
     * 
     * @param namespaceID Namespace ID
     * @param composeNamespaceNamespaceIDPagePostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDPagePost(namespaceID: string, composeNamespaceNamespaceIDPagePostRequest?: ComposeNamespaceNamespaceIDPagePostRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDPagePost(namespaceID: string, composeNamespaceNamespaceIDPagePostRequest?: ComposeNamespaceNamespaceIDPagePostRequest, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDPagePost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/page/`,
                    composeNamespaceNamespaceIDPagePostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Reorder pages
     * 
     * @param namespaceID Namespace ID
     * @param selfID Parent page ID
     * @param composeNamespaceNamespaceIDPageSelfIDReorderPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDPageSelfIDReorderPost(namespaceID: string, selfID: string, composeNamespaceNamespaceIDPageSelfIDReorderPostRequest?: ComposeNamespaceNamespaceIDPageSelfIDReorderPostRequest, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDPageSelfIDReorderPost(namespaceID: string, selfID: string, composeNamespaceNamespaceIDPageSelfIDReorderPostRequest?: ComposeNamespaceNamespaceIDPageSelfIDReorderPostRequest, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDPageSelfIDReorderPost.');
        }

        if (selfID === null || selfID === undefined) {
            throw new Error('Required parameter selfID was null or undefined when calling composeNamespaceNamespaceIDPageSelfIDReorderPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/page/${encodeURIComponent(String(selfID))}/reorder`,
                    composeNamespaceNamespaceIDPageSelfIDReorderPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get page all (non-record) pages, hierarchically
     * 
     * @param namespaceID Namespace ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeNamespaceNamespaceIDPageTreeGet(namespaceID: string, ): Observable<AxiosResponse<any>>;
    public composeNamespaceNamespaceIDPageTreeGet(namespaceID: string, ): Observable<any> {
        if (namespaceID === null || namespaceID === undefined) {
            throw new Error('Required parameter namespaceID was null or undefined when calling composeNamespaceNamespaceIDPageTreeGet.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/compose/namespace/${encodeURIComponent(String(namespaceID))}/page/tree`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
