/**
 * Corteza compose API
 * Corteza compose REST API definition
 *
 * The version of the OpenAPI document: 2022.9
 * Contact: info@cortezaproject.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { ComposeNamespaceNamespaceIDTriggerPostRequest } from '../model/composeNamespaceNamespaceIDTriggerPostRequest';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class ComposeAutomationScriptsService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Serves client scripts bundle
     * 
     * @param bundle Name of the bundle
     * @param type Bundle type
     * @param ext Bundle extension
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeAutomationBundleTypeExtGet(bundle: string, type: string, ext: string, ): Observable<AxiosResponse<any>>;
    public composeAutomationBundleTypeExtGet(bundle: string, type: string, ext: string, ): Observable<any> {
        if (bundle === null || bundle === undefined) {
            throw new Error('Required parameter bundle was null or undefined when calling composeAutomationBundleTypeExtGet.');
        }

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling composeAutomationBundleTypeExtGet.');
        }

        if (ext === null || ext === undefined) {
            throw new Error('Required parameter ext was null or undefined when calling composeAutomationBundleTypeExtGet.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/compose/automation/${encodeURIComponent(String(bundle))}-${encodeURIComponent(String(type))}.${encodeURIComponent(String(ext))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * List all available automation scripts for compose resources
     * 
     * @param resourceTypePrefixes Filter by resource prefix
     * @param resourceTypes Filter by resource type
     * @param eventTypes Filter by event type
     * @param excludeInvalid Exclude scripts that cannot be used (errors)
     * @param excludeClientScripts Do not include client scripts
     * @param excludeServerScripts Do not include server scripts
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeAutomationGet(resourceTypePrefixes?: Array<string>, resourceTypes?: Array<string>, eventTypes?: Array<string>, excludeInvalid?: boolean, excludeClientScripts?: boolean, excludeServerScripts?: boolean, ): Observable<AxiosResponse<any>>;
    public composeAutomationGet(resourceTypePrefixes?: Array<string>, resourceTypes?: Array<string>, eventTypes?: Array<string>, excludeInvalid?: boolean, excludeClientScripts?: boolean, excludeServerScripts?: boolean, ): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (resourceTypePrefixes) {
            resourceTypePrefixes.forEach((element) => {
                queryParameters.append('resourceTypePrefixes', <any>element);
            })
        }
        if (resourceTypes) {
            resourceTypes.forEach((element) => {
                queryParameters.append('resourceTypes', <any>element);
            })
        }
        if (eventTypes) {
            eventTypes.forEach((element) => {
                queryParameters.append('eventTypes', <any>element);
            })
        }
        if (excludeInvalid !== undefined && excludeInvalid !== null) {
            queryParameters.append('excludeInvalid', <any>excludeInvalid);
        }
        if (excludeClientScripts !== undefined && excludeClientScripts !== null) {
            queryParameters.append('excludeClientScripts', <any>excludeClientScripts);
        }
        if (excludeServerScripts !== undefined && excludeServerScripts !== null) {
            queryParameters.append('excludeServerScripts', <any>excludeServerScripts);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<any>(`${this.basePath}/compose/automation/`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Triggers execution of a specific script on a system service level
     * 
     * @param composeNamespaceNamespaceIDTriggerPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public composeAutomationTriggerPost(composeNamespaceNamespaceIDTriggerPostRequest?: ComposeNamespaceNamespaceIDTriggerPostRequest, ): Observable<AxiosResponse<any>>;
    public composeAutomationTriggerPost(composeNamespaceNamespaceIDTriggerPostRequest?: ComposeNamespaceNamespaceIDTriggerPostRequest, ): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/compose/automation/trigger`,
                    composeNamespaceNamespaceIDTriggerPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
